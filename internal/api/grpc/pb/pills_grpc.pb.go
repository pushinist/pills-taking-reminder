// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/pills.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PTRService_CreateSchedule_FullMethodName  = "/ptr.PTRService/CreateSchedule"
	PTRService_GetSchedule_FullMethodName     = "/ptr.PTRService/GetSchedule"
	PTRService_GetSchedulesIDs_FullMethodName = "/ptr.PTRService/GetSchedulesIDs"
	PTRService_GetNextTakings_FullMethodName  = "/ptr.PTRService/GetNextTakings"
)

// PTRServiceClient is the client API for PTRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PTRServiceClient interface {
	CreateSchedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleIDResponse, error)
	GetSchedule(ctx context.Context, in *ScheduleIDRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	GetSchedulesIDs(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*ScheduleIDList, error)
	GetNextTakings(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*TakingList, error)
}

type pTRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPTRServiceClient(cc grpc.ClientConnInterface) PTRServiceClient {
	return &pTRServiceClient{cc}
}

func (c *pTRServiceClient) CreateSchedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleIDResponse)
	err := c.cc.Invoke(ctx, PTRService_CreateSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTRServiceClient) GetSchedule(ctx context.Context, in *ScheduleIDRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, PTRService_GetSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTRServiceClient) GetSchedulesIDs(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*ScheduleIDList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleIDList)
	err := c.cc.Invoke(ctx, PTRService_GetSchedulesIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTRServiceClient) GetNextTakings(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*TakingList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TakingList)
	err := c.cc.Invoke(ctx, PTRService_GetNextTakings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PTRServiceServer is the server API for PTRService service.
// All implementations must embed UnimplementedPTRServiceServer
// for forward compatibility.
type PTRServiceServer interface {
	CreateSchedule(context.Context, *ScheduleRequest) (*ScheduleIDResponse, error)
	GetSchedule(context.Context, *ScheduleIDRequest) (*ScheduleResponse, error)
	GetSchedulesIDs(context.Context, *UserIDRequest) (*ScheduleIDList, error)
	GetNextTakings(context.Context, *UserIDRequest) (*TakingList, error)
	mustEmbedUnimplementedPTRServiceServer()
}

// UnimplementedPTRServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPTRServiceServer struct{}

func (UnimplementedPTRServiceServer) CreateSchedule(context.Context, *ScheduleRequest) (*ScheduleIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedule not implemented")
}
func (UnimplementedPTRServiceServer) GetSchedule(context.Context, *ScheduleIDRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedPTRServiceServer) GetSchedulesIDs(context.Context, *UserIDRequest) (*ScheduleIDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulesIDs not implemented")
}
func (UnimplementedPTRServiceServer) GetNextTakings(context.Context, *UserIDRequest) (*TakingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextTakings not implemented")
}
func (UnimplementedPTRServiceServer) mustEmbedUnimplementedPTRServiceServer() {}
func (UnimplementedPTRServiceServer) testEmbeddedByValue()                    {}

// UnsafePTRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PTRServiceServer will
// result in compilation errors.
type UnsafePTRServiceServer interface {
	mustEmbedUnimplementedPTRServiceServer()
}

func RegisterPTRServiceServer(s grpc.ServiceRegistrar, srv PTRServiceServer) {
	// If the following call pancis, it indicates UnimplementedPTRServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PTRService_ServiceDesc, srv)
}

func _PTRService_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTRServiceServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTRService_CreateSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTRServiceServer).CreateSchedule(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTRService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTRServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTRService_GetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTRServiceServer).GetSchedule(ctx, req.(*ScheduleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTRService_GetSchedulesIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTRServiceServer).GetSchedulesIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTRService_GetSchedulesIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTRServiceServer).GetSchedulesIDs(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTRService_GetNextTakings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTRServiceServer).GetNextTakings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTRService_GetNextTakings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTRServiceServer).GetNextTakings(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PTRService_ServiceDesc is the grpc.ServiceDesc for PTRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PTRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ptr.PTRService",
	HandlerType: (*PTRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchedule",
			Handler:    _PTRService_CreateSchedule_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _PTRService_GetSchedule_Handler,
		},
		{
			MethodName: "GetSchedulesIDs",
			Handler:    _PTRService_GetSchedulesIDs_Handler,
		},
		{
			MethodName: "GetNextTakings",
			Handler:    _PTRService_GetNextTakings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/pills.proto",
}
